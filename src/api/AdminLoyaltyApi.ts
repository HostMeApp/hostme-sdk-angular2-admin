/**
 * Qa admin api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: admin
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Injectable }                      					 from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering max-line-length */


@Injectable()
export class AdminLoyaltyApi {
    public defaultHeaders: Headers = new Headers();

    constructor(protected http: Http, protected configuration: Configuration) {
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param contract 
     */
    public addMember(restaurantId: number, contract: models.MembershipCreate, extraHttpRequestParams?: any): Observable<any> {
        return this.addMemberWithHttpInfo(restaurantId, contract, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param reward 
     */
    public addNewReward(restaurantId: number, reward: models.Reward, extraHttpRequestParams?: any): Observable<models.Reward> {
        return this.addNewRewardWithHttpInfo(restaurantId, reward, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param redeemId 
     */
    public approveRedeemRequest(restaurantId: number, redeemId: string, extraHttpRequestParams?: any): Observable<models.RedeemRequest> {
        return this.approveRedeemRequestWithHttpInfo(restaurantId, redeemId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param memberId 
     */
    public closeMembership(restaurantId: number, memberId: number, extraHttpRequestParams?: any): Observable<models.Member> {
        return this.closeMembershipWithHttpInfo(restaurantId, memberId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param rewardId 
     */
    public deleteReward(restaurantId: number, rewardId: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.deleteRewardWithHttpInfo(restaurantId, rewardId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     */
    public exportMembers(restaurantId: number, extraHttpRequestParams?: any): Observable<any> {
        return this.exportMembersWithHttpInfo(restaurantId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param take 
     * @param token 
     */
    public filter(restaurantId: number, take: number, token: string, extraHttpRequestParams?: any): Observable<Array<models.CustomerProfile>> {
        return this.filterWithHttpInfo(restaurantId, take, token, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param phoneNumber 
     */
    public findMemberByPhoneNumber(restaurantId: number, phoneNumber: string, extraHttpRequestParams?: any): Observable<models.Member> {
        return this.findMemberByPhoneNumberWithHttpInfo(restaurantId, phoneNumber, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     */
    public getAlRewards(restaurantId: number, extraHttpRequestParams?: any): Observable<Array<models.Reward>> {
        return this.getAlRewardsWithHttpInfo(restaurantId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     */
    public getAllMembers(restaurantId: number, extraHttpRequestParams?: any): Observable<models.ODataPagedResult1MemberContract> {
        return this.getAllMembersWithHttpInfo(restaurantId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     */
    public getAllRedeemRequests(restaurantId: number, extraHttpRequestParams?: any): Observable<Array<models.RedeemRequest>> {
        return this.getAllRedeemRequestsWithHttpInfo(restaurantId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     */
    public getDefaultLoyaltySettings(restaurantId: number, extraHttpRequestParams?: any): Observable<models.LoyaltySettings> {
        return this.getDefaultLoyaltySettingsWithHttpInfo(restaurantId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     */
    public getLoyaltySettings(restaurantId: number, extraHttpRequestParams?: any): Observable<models.LoyaltySettings> {
        return this.getLoyaltySettingsWithHttpInfo(restaurantId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param memberId 
     */
    public getMemberAvatar(restaurantId: number, memberId: number, extraHttpRequestParams?: any): Observable<string> {
        return this.getMemberAvatarWithHttpInfo(restaurantId, memberId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param memberId 
     */
    public getMemberTransactions(restaurantId: number, memberId: number, extraHttpRequestParams?: any): Observable<models.ODataPagedResult1TransactionContract> {
        return this.getMemberTransactionsWithHttpInfo(restaurantId, memberId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param memberId 
     */
    public getMemberVisits(restaurantId: number, memberId: number, extraHttpRequestParams?: any): Observable<models.ODataPagedResult1MembershipVisitItemContract> {
        return this.getMemberVisitsWithHttpInfo(restaurantId, memberId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param memberId 
     */
    public getMembershipInfo(restaurantId: number, memberId: number, extraHttpRequestParams?: any): Observable<models.Member> {
        return this.getMembershipInfoWithHttpInfo(restaurantId, memberId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param rewardId 
     */
    public getRewardById(restaurantId: number, rewardId: string, extraHttpRequestParams?: any): Observable<models.Reward> {
        return this.getRewardByIdWithHttpInfo(restaurantId, rewardId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param rewardId 
     */
    public publishReward(restaurantId: number, rewardId: string, extraHttpRequestParams?: any): Observable<models.Reward> {
        return this.publishRewardWithHttpInfo(restaurantId, rewardId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param redeemId 
     * @param reject 
     */
    public rejectRedeemRequest(restaurantId: number, redeemId: string, reject: models.RedeemRequestReject, extraHttpRequestParams?: any): Observable<models.RedeemRequest> {
        return this.rejectRedeemRequestWithHttpInfo(restaurantId, redeemId, reject, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param settings 
     */
    public setLoyaltySettings(restaurantId: number, settings: models.LoyaltySettings, extraHttpRequestParams?: any): Observable<{}> {
        return this.setLoyaltySettingsWithHttpInfo(restaurantId, settings, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param rewardId 
     */
    public unpublishReward(restaurantId: number, rewardId: string, extraHttpRequestParams?: any): Observable<models.Reward> {
        return this.unpublishRewardWithHttpInfo(restaurantId, rewardId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param memberId 
     * @param contract 
     */
    public updateMember(restaurantId: number, memberId: number, contract: models.MembershipUpdate, extraHttpRequestParams?: any): Observable<any> {
        return this.updateMemberWithHttpInfo(restaurantId, memberId, contract, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param rewardId 
     * @param reward 
     */
    public updateReward(restaurantId: number, rewardId: string, reward: models.Reward, extraHttpRequestParams?: any): Observable<models.Reward> {
        return this.updateRewardWithHttpInfo(restaurantId, rewardId, reward, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * 
     * 
     * @param restaurantId 
     * @param contract 
     */
    public addMemberWithHttpInfo(restaurantId: number, contract: models.MembershipCreate, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/loyalty/admin/restaurants/${restaurantId}/members';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling addMember.');
        }
        // verify required parameter 'contract' is undefined
        if (contract === undefined) {
            throw new Error('Required parameter contract was null or undefined when calling addMember.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
            'image/jpg',
            'image/jpeg',
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }


        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            body: contract == undefined ? '' : JSON.stringify(contract), // https://github.com/angular/angular/issues/10612
            headers: headers,
            method: RequestMethod.Post,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param reward 
     */
    public addNewRewardWithHttpInfo(restaurantId: number, reward: models.Reward, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/loyalty/admin/restaurants/${restaurantId}/rewards';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling addNewReward.');
        }
        // verify required parameter 'reward' is undefined
        if (reward === undefined) {
            throw new Error('Required parameter reward was null or undefined when calling addNewReward.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
            'image/jpg',
            'image/jpeg',
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }


        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            body: reward == undefined ? '' : JSON.stringify(reward), // https://github.com/angular/angular/issues/10612
            headers: headers,
            method: RequestMethod.Post,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param redeemId 
     */
    public approveRedeemRequestWithHttpInfo(restaurantId: number, redeemId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/loyalty/admin/restaurants/${restaurantId}/redeems/${redeemId}/approve';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling approveRedeemRequest.');
        }
        // verify required parameter 'redeemId' is undefined
        if (redeemId === undefined) {
            throw new Error('Required parameter redeemId was null or undefined when calling approveRedeemRequest.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Post,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param memberId 
     */
    public closeMembershipWithHttpInfo(restaurantId: number, memberId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/loyalty/admin/restaurants/${restaurantId}/members/${memberId}/close';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling closeMembership.');
        }
        // verify required parameter 'memberId' is undefined
        if (memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling closeMembership.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Put,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param rewardId 
     */
    public deleteRewardWithHttpInfo(restaurantId: number, rewardId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/loyalty/admin/restaurants/${restaurantId}/rewards/${rewardId}';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling deleteReward.');
        }
        // verify required parameter 'rewardId' is undefined
        if (rewardId === undefined) {
            throw new Error('Required parameter rewardId was null or undefined when calling deleteReward.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Delete,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     */
    public exportMembersWithHttpInfo(restaurantId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/loyalty/admin/restaurants/${restaurantId}/members/export';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling exportMembers.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Post,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param take 
     * @param token 
     */
    public filterWithHttpInfo(restaurantId: number, take: number, token: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/loyalty/admin/restaurants/${restaurantId}/members/filter';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling filter.');
        }
        // verify required parameter 'take' is undefined
        if (take === undefined) {
            throw new Error('Required parameter take was null or undefined when calling filter.');
        }
        // verify required parameter 'token' is undefined
        if (token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling filter.');
        }
        if (take !== undefined) {
            queryParameters.set('take', take as any);
        }
        if (token !== undefined) {
            queryParameters.set('token', token as any);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param phoneNumber 
     */
    public findMemberByPhoneNumberWithHttpInfo(restaurantId: number, phoneNumber: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/loyalty/admin/restaurants/${restaurantId}/members/find';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling findMemberByPhoneNumber.');
        }
        // verify required parameter 'phoneNumber' is undefined
        if (phoneNumber === undefined) {
            throw new Error('Required parameter phoneNumber was null or undefined when calling findMemberByPhoneNumber.');
        }
        if (phoneNumber !== undefined) {
            queryParameters.set('phoneNumber', phoneNumber as any);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     */
    public getAlRewardsWithHttpInfo(restaurantId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/loyalty/admin/restaurants/${restaurantId}/rewards';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling getAlRewards.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     */
    public getAllMembersWithHttpInfo(restaurantId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/loyalty/admin/restaurants/${restaurantId}/members';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling getAllMembers.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     */
    public getAllRedeemRequestsWithHttpInfo(restaurantId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/loyalty/admin/restaurants/${restaurantId}/redeems';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling getAllRedeemRequests.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     */
    public getDefaultLoyaltySettingsWithHttpInfo(restaurantId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/loyalty/admin/restaurants/${restaurantId}/settings/default';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling getDefaultLoyaltySettings.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     */
    public getLoyaltySettingsWithHttpInfo(restaurantId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/loyalty/admin/restaurants/${restaurantId}/settings';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling getLoyaltySettings.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param memberId 
     */
    public getMemberAvatarWithHttpInfo(restaurantId: number, memberId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/loyalty/admin/restaurants/${restaurantId}/members/${memberId}/avatar';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling getMemberAvatar.');
        }
        // verify required parameter 'memberId' is undefined
        if (memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling getMemberAvatar.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/octet-stream'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param memberId 
     */
    public getMemberTransactionsWithHttpInfo(restaurantId: number, memberId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/loyalty/admin/restaurants/${restaurantId}/members/${memberId}/transactions';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling getMemberTransactions.');
        }
        // verify required parameter 'memberId' is undefined
        if (memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling getMemberTransactions.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param memberId 
     */
    public getMemberVisitsWithHttpInfo(restaurantId: number, memberId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/loyalty/admin/restaurants/${restaurantId}/members/${memberId}/visits';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling getMemberVisits.');
        }
        // verify required parameter 'memberId' is undefined
        if (memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling getMemberVisits.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param memberId 
     */
    public getMembershipInfoWithHttpInfo(restaurantId: number, memberId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/loyalty/admin/restaurants/${restaurantId}/members/${memberId}';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling getMembershipInfo.');
        }
        // verify required parameter 'memberId' is undefined
        if (memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling getMembershipInfo.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param rewardId 
     */
    public getRewardByIdWithHttpInfo(restaurantId: number, rewardId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/loyalty/admin/restaurants/${restaurantId}/rewards/${rewardId}';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling getRewardById.');
        }
        // verify required parameter 'rewardId' is undefined
        if (rewardId === undefined) {
            throw new Error('Required parameter rewardId was null or undefined when calling getRewardById.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param rewardId 
     */
    public publishRewardWithHttpInfo(restaurantId: number, rewardId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/loyalty/admin/restaurants/${restaurantId}/rewards/${rewardId}/publish';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling publishReward.');
        }
        // verify required parameter 'rewardId' is undefined
        if (rewardId === undefined) {
            throw new Error('Required parameter rewardId was null or undefined when calling publishReward.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Put,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param redeemId 
     * @param reject 
     */
    public rejectRedeemRequestWithHttpInfo(restaurantId: number, redeemId: string, reject: models.RedeemRequestReject, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/loyalty/admin/restaurants/${restaurantId}/redeems/${redeemId}/reject';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling rejectRedeemRequest.');
        }
        // verify required parameter 'redeemId' is undefined
        if (redeemId === undefined) {
            throw new Error('Required parameter redeemId was null or undefined when calling rejectRedeemRequest.');
        }
        // verify required parameter 'reject' is undefined
        if (reject === undefined) {
            throw new Error('Required parameter reject was null or undefined when calling rejectRedeemRequest.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
            'image/jpg',
            'image/jpeg',
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }


        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            body: reject == undefined ? '' : JSON.stringify(reject), // https://github.com/angular/angular/issues/10612
            headers: headers,
            method: RequestMethod.Post,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param settings 
     */
    public setLoyaltySettingsWithHttpInfo(restaurantId: number, settings: models.LoyaltySettings, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/loyalty/admin/restaurants/${restaurantId}/settings';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling setLoyaltySettings.');
        }
        // verify required parameter 'settings' is undefined
        if (settings === undefined) {
            throw new Error('Required parameter settings was null or undefined when calling setLoyaltySettings.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
            'image/jpg',
            'image/jpeg',
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }


        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            body: settings == undefined ? '' : JSON.stringify(settings), // https://github.com/angular/angular/issues/10612
            headers: headers,
            method: RequestMethod.Put,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param rewardId 
     */
    public unpublishRewardWithHttpInfo(restaurantId: number, rewardId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/loyalty/admin/restaurants/${restaurantId}/rewards/${rewardId}/unpublish';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling unpublishReward.');
        }
        // verify required parameter 'rewardId' is undefined
        if (rewardId === undefined) {
            throw new Error('Required parameter rewardId was null or undefined when calling unpublishReward.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Put,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param memberId 
     * @param contract 
     */
    public updateMemberWithHttpInfo(restaurantId: number, memberId: number, contract: models.MembershipUpdate, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/loyalty/admin/restaurants/${restaurantId}/members/${memberId}';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling updateMember.');
        }
        // verify required parameter 'memberId' is undefined
        if (memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling updateMember.');
        }
        // verify required parameter 'contract' is undefined
        if (contract === undefined) {
            throw new Error('Required parameter contract was null or undefined when calling updateMember.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
            'image/jpg',
            'image/jpeg',
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }


        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            body: contract == undefined ? '' : JSON.stringify(contract), // https://github.com/angular/angular/issues/10612
            headers: headers,
            method: RequestMethod.Put,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param rewardId 
     * @param reward 
     */
    public updateRewardWithHttpInfo(restaurantId: number, rewardId: string, reward: models.Reward, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/loyalty/admin/restaurants/${restaurantId}/rewards/${rewardId}';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling updateReward.');
        }
        // verify required parameter 'rewardId' is undefined
        if (rewardId === undefined) {
            throw new Error('Required parameter rewardId was null or undefined when calling updateReward.');
        }
        // verify required parameter 'reward' is undefined
        if (reward === undefined) {
            throw new Error('Required parameter reward was null or undefined when calling updateReward.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
            'image/jpg',
            'image/jpeg',
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }


        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            body: reward == undefined ? '' : JSON.stringify(reward), // https://github.com/angular/angular/issues/10612
            headers: headers,
            method: RequestMethod.Put,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

}
