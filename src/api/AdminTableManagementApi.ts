/**
 * Qa admin api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: admin
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Injectable }                      					 from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering max-line-length */


@Injectable()
export class AdminTableManagementApi {
    public defaultHeaders: Headers = new Headers();

    constructor(protected http: Http, protected configuration: Configuration) {
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param floor 
     */
    public createNewFloor(restaurantId: number, floor: models.Floor, extraHttpRequestParams?: any): Observable<models.Floor> {
        return this.createNewFloorWithHttpInfo(restaurantId, floor, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param floorId 
     */
    public deleteFloor(restaurantId: number, floorId: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.deleteFloorWithHttpInfo(restaurantId, floorId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     */
    public getAllTableCombinations(restaurantId: number, extraHttpRequestParams?: any): Observable<Array<models.TableInfo>> {
        return this.getAllTableCombinationsWithHttpInfo(restaurantId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     */
    public getApprovedTableCombinations(restaurantId: number, extraHttpRequestParams?: any): Observable<Array<models.TableInfo>> {
        return this.getApprovedTableCombinationsWithHttpInfo(restaurantId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param date 
     * @param partySize 
     * @param areas 
     */
    public getAvailableTables(restaurantId: number, date: Date, partySize: number, areas?: string, extraHttpRequestParams?: any): Observable<Array<models.TableInfo>> {
        return this.getAvailableTablesWithHttpInfo(restaurantId, date, partySize, areas, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param floorId 
     */
    public getFloorDetails(restaurantId: number, floorId: string, extraHttpRequestParams?: any): Observable<models.Floor> {
        return this.getFloorDetailsWithHttpInfo(restaurantId, floorId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     */
    public getRestaurantFloors(restaurantId: number, extraHttpRequestParams?: any): Observable<Array<models.FloorInfo>> {
        return this.getRestaurantFloorsWithHttpInfo(restaurantId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param tableTurnOver 
     * @param time 
     */
    public getTableMonitors(restaurantId: number, tableTurnOver?: number, time?: Date, extraHttpRequestParams?: any): Observable<Array<models.TableMonitor>> {
        return this.getTableMonitorsWithHttpInfo(restaurantId, tableTurnOver, time, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param partySize 
     * @param time 
     */
    public getTableUsersList(restaurantId: number, partySize?: number, time?: Date, extraHttpRequestParams?: any): Observable<Array<models.TableUser>> {
        return this.getTableUsersListWithHttpInfo(restaurantId, partySize, time, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     */
    public getTables(restaurantId: number, extraHttpRequestParams?: any): Observable<Array<models.Table>> {
        return this.getTablesWithHttpInfo(restaurantId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param tableNumber 
     */
    public releaseTable(restaurantId: number, tableNumber: string, extraHttpRequestParams?: any): Observable<models.TableMonitor> {
        return this.releaseTableWithHttpInfo(restaurantId, tableNumber, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param tableNumber 
     * @param partySize 
     */
    public seatPartyAtTable(restaurantId: number, tableNumber: string, partySize: number, extraHttpRequestParams?: any): Observable<models.TableMonitor> {
        return this.seatPartyAtTableWithHttpInfo(restaurantId, tableNumber, partySize, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param combinations 
     */
    public setApprovedTableCombinations(restaurantId: number, combinations: Array<models.Table>, extraHttpRequestParams?: any): Observable<{}> {
        return this.setApprovedTableCombinationsWithHttpInfo(restaurantId, combinations, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param tableNumber 
     * @param stateContract 
     */
    public setTableState(restaurantId: number, tableNumber: string, stateContract: models.ChangeTableState, extraHttpRequestParams?: any): Observable<{}> {
        return this.setTableStateWithHttpInfo(restaurantId, tableNumber, stateContract, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param floorId 
     * @param floor 
     */
    public updateFloor(restaurantId: number, floorId: string, floor: models.Floor, extraHttpRequestParams?: any): Observable<any> {
        return this.updateFloorWithHttpInfo(restaurantId, floorId, floor, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * 
     * 
     * @param restaurantId 
     * @param floor 
     */
    public createNewFloorWithHttpInfo(restaurantId: number, floor: models.Floor, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/tm/admin/restaurants/${restaurantId}/floors';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling createNewFloor.');
        }
        // verify required parameter 'floor' is undefined
        if (floor === undefined) {
            throw new Error('Required parameter floor was null or undefined when calling createNewFloor.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
            'image/jpg',
            'image/jpeg',
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }


        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            body: floor == undefined ? '' : JSON.stringify(floor), // https://github.com/angular/angular/issues/10612
            headers: headers,
            method: RequestMethod.Post,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param floorId 
     */
    public deleteFloorWithHttpInfo(restaurantId: number, floorId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/tm/admin/restaurants/${restaurantId}/floors/${floorId}';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling deleteFloor.');
        }
        // verify required parameter 'floorId' is undefined
        if (floorId === undefined) {
            throw new Error('Required parameter floorId was null or undefined when calling deleteFloor.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Delete,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     */
    public getAllTableCombinationsWithHttpInfo(restaurantId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/tm/admin/restaurants/${restaurantId}/tables/combinations';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling getAllTableCombinations.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     */
    public getApprovedTableCombinationsWithHttpInfo(restaurantId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/tm/admin/restaurants/${restaurantId}/tables/combinations/approved';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling getApprovedTableCombinations.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param date 
     * @param partySize 
     * @param areas 
     */
    public getAvailableTablesWithHttpInfo(restaurantId: number, date: Date, partySize: number, areas?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/tm/admin/restaurants/${restaurantId}/tables/available';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling getAvailableTables.');
        }
        // verify required parameter 'date' is undefined
        if (date === undefined) {
            throw new Error('Required parameter date was null or undefined when calling getAvailableTables.');
        }
        // verify required parameter 'partySize' is undefined
        if (partySize === undefined) {
            throw new Error('Required parameter partySize was null or undefined when calling getAvailableTables.');
        }
        if (date !== undefined) {
            queryParameters.set('date', date as any);
        }
        if (partySize !== undefined) {
            queryParameters.set('partySize', partySize as any);
        }
        if (areas !== undefined) {
            queryParameters.set('areas', areas as any);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param floorId 
     */
    public getFloorDetailsWithHttpInfo(restaurantId: number, floorId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/tm/admin/restaurants/${restaurantId}/floors/${floorId}';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling getFloorDetails.');
        }
        // verify required parameter 'floorId' is undefined
        if (floorId === undefined) {
            throw new Error('Required parameter floorId was null or undefined when calling getFloorDetails.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     */
    public getRestaurantFloorsWithHttpInfo(restaurantId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/tm/admin/restaurants/${restaurantId}/floors';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling getRestaurantFloors.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param tableTurnOver 
     * @param time 
     */
    public getTableMonitorsWithHttpInfo(restaurantId: number, tableTurnOver?: number, time?: Date, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/tm/admin/restaurants/${restaurantId}/tables/monitors';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling getTableMonitors.');
        }
        if (tableTurnOver !== undefined) {
            queryParameters.set('tableTurnOver', tableTurnOver as any);
        }
        if (time !== undefined) {
            queryParameters.set('time', time as any);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param partySize 
     * @param time 
     */
    public getTableUsersListWithHttpInfo(restaurantId: number, partySize?: number, time?: Date, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/tm/admin/restaurants/${restaurantId}/tables/users';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling getTableUsersList.');
        }
        if (partySize !== undefined) {
            queryParameters.set('partySize', partySize as any);
        }
        if (time !== undefined) {
            queryParameters.set('time', time as any);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     */
    public getTablesWithHttpInfo(restaurantId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/tm/admin/restaurants/${restaurantId}/tables';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling getTables.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Get,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param tableNumber 
     */
    public releaseTableWithHttpInfo(restaurantId: number, tableNumber: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/tm/admin/restaurants/${restaurantId}/tables/${tableNumber}/release';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling releaseTable.');
        }
        // verify required parameter 'tableNumber' is undefined
        if (tableNumber === undefined) {
            throw new Error('Required parameter tableNumber was null or undefined when calling releaseTable.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Put,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param tableNumber 
     * @param partySize 
     */
    public seatPartyAtTableWithHttpInfo(restaurantId: number, tableNumber: string, partySize: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/tm/admin/restaurants/${restaurantId}/tables/${tableNumber}/seat';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling seatPartyAtTable.');
        }
        // verify required parameter 'tableNumber' is undefined
        if (tableNumber === undefined) {
            throw new Error('Required parameter tableNumber was null or undefined when calling seatPartyAtTable.');
        }
        // verify required parameter 'partySize' is undefined
        if (partySize === undefined) {
            throw new Error('Required parameter partySize was null or undefined when calling seatPartyAtTable.');
        }
        if (partySize !== undefined) {
            queryParameters.set('partySize', partySize as any);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }




        let requestOptions: RequestOptionsArgs = new RequestOptions({
            headers: headers,
            method: RequestMethod.Put,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param combinations 
     */
    public setApprovedTableCombinationsWithHttpInfo(restaurantId: number, combinations: Array<models.Table>, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/tm/admin/restaurants/${restaurantId}/tables/combinations/approved';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling setApprovedTableCombinations.');
        }
        // verify required parameter 'combinations' is undefined
        if (combinations === undefined) {
            throw new Error('Required parameter combinations was null or undefined when calling setApprovedTableCombinations.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
            'image/jpg',
            'image/jpeg',
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }


        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            body: combinations == undefined ? '' : JSON.stringify(combinations), // https://github.com/angular/angular/issues/10612
            headers: headers,
            method: RequestMethod.Put,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param tableNumber 
     * @param stateContract 
     */
    public setTableStateWithHttpInfo(restaurantId: number, tableNumber: string, stateContract: models.ChangeTableState, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/tm/admin/restaurants/${restaurantId}/tables/${tableNumber}/state';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling setTableState.');
        }
        // verify required parameter 'tableNumber' is undefined
        if (tableNumber === undefined) {
            throw new Error('Required parameter tableNumber was null or undefined when calling setTableState.');
        }
        // verify required parameter 'stateContract' is undefined
        if (stateContract === undefined) {
            throw new Error('Required parameter stateContract was null or undefined when calling setTableState.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
            'image/jpg',
            'image/jpeg',
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }


        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            body: stateContract == undefined ? '' : JSON.stringify(stateContract), // https://github.com/angular/angular/issues/10612
            headers: headers,
            method: RequestMethod.Put,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param floorId 
     * @param floor 
     */
    public updateFloorWithHttpInfo(restaurantId: number, floorId: string, floor: models.Floor, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/api/tm/admin/restaurants/${restaurantId}/floors/${floorId}';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is undefined
        if (restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling updateFloor.');
        }
        // verify required parameter 'floorId' is undefined
        if (floorId === undefined) {
            throw new Error('Required parameter floorId was null or undefined when calling updateFloor.');
        }
        // verify required parameter 'floor' is undefined
        if (floor === undefined) {
            throw new Error('Required parameter floor was null or undefined when calling updateFloor.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
            'image/jpg',
            'image/jpeg',
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }


        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            body: floor == undefined ? '' : JSON.stringify(floor), // https://github.com/angular/angular/issues/10612
            headers: headers,
            method: RequestMethod.Put,
            responseType: ResponseContentType.Json,
            search: queryParameters
        });

        return this.http.request(path, requestOptions);
    }

}
