/**
 * Qa admin api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: admin
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH }                                         from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class AdminReservationsApi {
    protected basePath = 'http://hostme-services-qa.azurewebsites.net';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param value 
     */
    public addNewReservation(restaurantId: number, value: models.CreateReservation, extraHttpRequestParams?: any): Observable<models.Reservation> {
        return this.addNewReservationWithHttpInfo(restaurantId, value, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param reservationId 
     * @param cancelReservationContract 
     */
    public cancelReservation(restaurantId: number, reservationId: string, cancelReservationContract: models.CancelReservation, extraHttpRequestParams?: any): Observable<models.Reservation> {
        return this.cancelReservationWithHttpInfo(restaurantId, reservationId, cancelReservationContract, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param reservationId 
     */
    public closeAsNoShow(restaurantId: number, reservationId: string, extraHttpRequestParams?: any): Observable<models.Reservation> {
        return this.closeAsNoShowWithHttpInfo(restaurantId, reservationId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param reservationId 
     * @param tableNumber 
     */
    public closeAsSeated(restaurantId: number, reservationId: string, tableNumber?: string, extraHttpRequestParams?: any): Observable<models.Reservation> {
        return this.closeAsSeatedWithHttpInfo(restaurantId, reservationId, tableNumber, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param reservationId 
     */
    public getMessages(restaurantId: number, reservationId: string, extraHttpRequestParams?: any): Observable<Array<models.Message>> {
        return this.getMessagesWithHttpInfo(restaurantId, reservationId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param date 
     * @param partySize 
     * @param rangeInMinutes 
     * @param tableTurnOver 
     * @param type 
     * @param areas 
     */
    public getReservationAvailability(restaurantId: number, date: Date, partySize: number, rangeInMinutes: number, tableTurnOver?: number, type?: string, areas?: string, extraHttpRequestParams?: any): Observable<models.AvailabilityResponse> {
        return this.getReservationAvailabilityWithHttpInfo(restaurantId, date, partySize, rangeInMinutes, tableTurnOver, type, areas, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param reservationId 
     */
    public getReservationById(restaurantId: number, reservationId: string, extraHttpRequestParams?: any): Observable<models.Reservation> {
        return this.getReservationByIdWithHttpInfo(restaurantId, reservationId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     */
    public getReservationSettings(restaurantId: number, extraHttpRequestParams?: any): Observable<models.ReservationSettings> {
        return this.getReservationSettingsWithHttpInfo(restaurantId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param from 
     * @param to 
     */
    public getReservationsForPeriod(restaurantId: number, from?: Date, to?: Date, extraHttpRequestParams?: any): Observable<Array<models.Reservation>> {
        return this.getReservationsForPeriodWithHttpInfo(restaurantId, from, to, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param date 
     */
    public getRestaurantReservationsStatistic(restaurantId: number, date?: Date, extraHttpRequestParams?: any): Observable<models.ReservationsStatistic> {
        return this.getRestaurantReservationsStatisticWithHttpInfo(restaurantId, date, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param from 
     */
    public getUnreadMessagesCount(restaurantId: number, from?: Date, extraHttpRequestParams?: any): Observable<models.Count> {
        return this.getUnreadMessagesCountWithHttpInfo(restaurantId, from, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param reservationId 
     */
    public placeOnWaitList(restaurantId: number, reservationId: string, extraHttpRequestParams?: any): Observable<models.WaitingItem> {
        return this.placeOnWaitListWithHttpInfo(restaurantId, reservationId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param reservationId 
     */
    public reOpenReservation(restaurantId: number, reservationId: string, extraHttpRequestParams?: any): Observable<models.Reservation> {
        return this.reOpenReservationWithHttpInfo(restaurantId, reservationId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Mark all message as read.
     * 
     * @param restaurantId Restaurant identifier
     * @param reservationId Reservation identifier
     */
    public readAllMessage(restaurantId: number, reservationId: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.readAllMessageWithHttpInfo(restaurantId, reservationId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param from 
     * @param html 
     * @param text 
     * @param to 
     * @param subject 
     */
    public sendGrid(from: string, html: string, text: string, to: string, subject: string, extraHttpRequestParams?: any): Observable<models.Reservation> {
        return this.sendGridWithHttpInfo(from, html, text, to, subject, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Sends a message related to specified reservation.
     * 
     * @param restaurantId Restaurant identifier
     * @param reservationId Reservation identifier
     * @param createMessageContract The message with body
     */
    public sendMessage(restaurantId: number, reservationId: string, createMessageContract: models.CreateMessage, extraHttpRequestParams?: any): Observable<models.Message> {
        return this.sendMessageWithHttpInfo(restaurantId, reservationId, createMessageContract, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param settings 
     */
    public setReservationSettings(restaurantId: number, settings: models.ReservationSettings, extraHttpRequestParams?: any): Observable<{}> {
        return this.setReservationSettingsWithHttpInfo(restaurantId, settings, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     */
    public submitYelpReservation(extraHttpRequestParams?: any): Observable<{}> {
        return this.submitYelpReservationWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param reservationId 
     * @param value 
     */
    public updateReservation(restaurantId: number, reservationId: string, value: models.CreateReservation, extraHttpRequestParams?: any): Observable<{}> {
        return this.updateReservationWithHttpInfo(restaurantId, reservationId, value, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * 
     * 
     * @param restaurantId 
     * @param value 
     */
    public addNewReservationWithHttpInfo(restaurantId: number, value: models.CreateReservation, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/rsv/admin/restaurants/${restaurantId}/reservations`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is not null or undefined
        if (restaurantId === null || restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling addNewReservation.');
        }
        // verify required parameter 'value' is not null or undefined
        if (value === null || value === undefined) {
            throw new Error('Required parameter value was null or undefined when calling addNewReservation.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml', 
            'application/x-www-form-urlencoded', 
            'image/jpg', 
            'image/jpeg', 
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml'
        ];
        
        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: value == null ? '' : JSON.stringify(value), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param reservationId 
     * @param cancelReservationContract 
     */
    public cancelReservationWithHttpInfo(restaurantId: number, reservationId: string, cancelReservationContract: models.CancelReservation, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/rsv/admin/restaurants/${restaurantId}/reservations/${reservationId}/cancel`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is not null or undefined
        if (restaurantId === null || restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling cancelReservation.');
        }
        // verify required parameter 'reservationId' is not null or undefined
        if (reservationId === null || reservationId === undefined) {
            throw new Error('Required parameter reservationId was null or undefined when calling cancelReservation.');
        }
        // verify required parameter 'cancelReservationContract' is not null or undefined
        if (cancelReservationContract === null || cancelReservationContract === undefined) {
            throw new Error('Required parameter cancelReservationContract was null or undefined when calling cancelReservation.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml', 
            'application/x-www-form-urlencoded', 
            'image/jpg', 
            'image/jpeg', 
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml'
        ];
        
        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: cancelReservationContract == null ? '' : JSON.stringify(cancelReservationContract), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param reservationId 
     */
    public closeAsNoShowWithHttpInfo(restaurantId: number, reservationId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/rsv/admin/restaurants/${restaurantId}/reservations/${reservationId}/noshow`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is not null or undefined
        if (restaurantId === null || restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling closeAsNoShow.');
        }
        // verify required parameter 'reservationId' is not null or undefined
        if (reservationId === null || reservationId === undefined) {
            throw new Error('Required parameter reservationId was null or undefined when calling closeAsNoShow.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml'
        ];
        
        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param reservationId 
     * @param tableNumber 
     */
    public closeAsSeatedWithHttpInfo(restaurantId: number, reservationId: string, tableNumber?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/rsv/admin/restaurants/${restaurantId}/reservations/${reservationId}/seat`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is not null or undefined
        if (restaurantId === null || restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling closeAsSeated.');
        }
        // verify required parameter 'reservationId' is not null or undefined
        if (reservationId === null || reservationId === undefined) {
            throw new Error('Required parameter reservationId was null or undefined when calling closeAsSeated.');
        }
        if (tableNumber !== undefined) {
            queryParameters.set('tableNumber', <any>tableNumber);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml'
        ];
        
        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param reservationId 
     */
    public getMessagesWithHttpInfo(restaurantId: number, reservationId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/rsv/admin/restaurants/${restaurantId}/reservations/${reservationId}/messages`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is not null or undefined
        if (restaurantId === null || restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling getMessages.');
        }
        // verify required parameter 'reservationId' is not null or undefined
        if (reservationId === null || reservationId === undefined) {
            throw new Error('Required parameter reservationId was null or undefined when calling getMessages.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml'
        ];
        
        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param date 
     * @param partySize 
     * @param rangeInMinutes 
     * @param tableTurnOver 
     * @param type 
     * @param areas 
     */
    public getReservationAvailabilityWithHttpInfo(restaurantId: number, date: Date, partySize: number, rangeInMinutes: number, tableTurnOver?: number, type?: string, areas?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/rsv/admin/restaurants/${restaurantId}/availability`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is not null or undefined
        if (restaurantId === null || restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling getReservationAvailability.');
        }
        // verify required parameter 'date' is not null or undefined
        if (date === null || date === undefined) {
            throw new Error('Required parameter date was null or undefined when calling getReservationAvailability.');
        }
        // verify required parameter 'partySize' is not null or undefined
        if (partySize === null || partySize === undefined) {
            throw new Error('Required parameter partySize was null or undefined when calling getReservationAvailability.');
        }
        // verify required parameter 'rangeInMinutes' is not null or undefined
        if (rangeInMinutes === null || rangeInMinutes === undefined) {
            throw new Error('Required parameter rangeInMinutes was null or undefined when calling getReservationAvailability.');
        }
        if (date !== undefined) {
            queryParameters.set('date', <any>date);
        }
        if (partySize !== undefined) {
            queryParameters.set('partySize', <any>partySize);
        }
        if (rangeInMinutes !== undefined) {
            queryParameters.set('rangeInMinutes', <any>rangeInMinutes);
        }
        if (tableTurnOver !== undefined) {
            queryParameters.set('tableTurnOver', <any>tableTurnOver);
        }
        if (type !== undefined) {
            queryParameters.set('type', <any>type);
        }
        if (areas !== undefined) {
            queryParameters.set('areas', <any>areas);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml'
        ];
        
        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param reservationId 
     */
    public getReservationByIdWithHttpInfo(restaurantId: number, reservationId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/rsv/admin/restaurants/${restaurantId}/reservations/${reservationId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is not null or undefined
        if (restaurantId === null || restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling getReservationById.');
        }
        // verify required parameter 'reservationId' is not null or undefined
        if (reservationId === null || reservationId === undefined) {
            throw new Error('Required parameter reservationId was null or undefined when calling getReservationById.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml'
        ];
        
        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     */
    public getReservationSettingsWithHttpInfo(restaurantId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/rsv/admin/restaurants/${restaurantId}/settings`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is not null or undefined
        if (restaurantId === null || restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling getReservationSettings.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml'
        ];
        
        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param from 
     * @param to 
     */
    public getReservationsForPeriodWithHttpInfo(restaurantId: number, from?: Date, to?: Date, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/rsv/admin/restaurants/${restaurantId}/reservations`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is not null or undefined
        if (restaurantId === null || restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling getReservationsForPeriod.');
        }
        if (from !== undefined) {
            queryParameters.set('from', <any>from);
        }
        if (to !== undefined) {
            queryParameters.set('to', <any>to);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml'
        ];
        
        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param date 
     */
    public getRestaurantReservationsStatisticWithHttpInfo(restaurantId: number, date?: Date, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/rsv/admin/restaurants/${restaurantId}/reservations/stats`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is not null or undefined
        if (restaurantId === null || restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling getRestaurantReservationsStatistic.');
        }
        if (date !== undefined) {
            queryParameters.set('date', <any>date);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml'
        ];
        
        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param from 
     */
    public getUnreadMessagesCountWithHttpInfo(restaurantId: number, from?: Date, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/rsv/admin/restaurants/${restaurantId}/reservations/messages/unread/count`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is not null or undefined
        if (restaurantId === null || restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling getUnreadMessagesCount.');
        }
        if (from !== undefined) {
            queryParameters.set('from', <any>from);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml'
        ];
        
        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param reservationId 
     */
    public placeOnWaitListWithHttpInfo(restaurantId: number, reservationId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/rsv/admin/restaurants/${restaurantId}/reservations/${reservationId}/schedule`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is not null or undefined
        if (restaurantId === null || restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling placeOnWaitList.');
        }
        // verify required parameter 'reservationId' is not null or undefined
        if (reservationId === null || reservationId === undefined) {
            throw new Error('Required parameter reservationId was null or undefined when calling placeOnWaitList.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml'
        ];
        
        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param reservationId 
     */
    public reOpenReservationWithHttpInfo(restaurantId: number, reservationId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/rsv/admin/restaurants/${restaurantId}/reservations/${reservationId}/reopen`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is not null or undefined
        if (restaurantId === null || restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling reOpenReservation.');
        }
        // verify required parameter 'reservationId' is not null or undefined
        if (reservationId === null || reservationId === undefined) {
            throw new Error('Required parameter reservationId was null or undefined when calling reOpenReservation.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml'
        ];
        
        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * Mark all message as read.
     * 
     * @param restaurantId Restaurant identifier
     * @param reservationId Reservation identifier
     */
    public readAllMessageWithHttpInfo(restaurantId: number, reservationId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/rsv/admin/restaurants/${restaurantId}/reservations/${reservationId}/messages/readall`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is not null or undefined
        if (restaurantId === null || restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling readAllMessage.');
        }
        // verify required parameter 'reservationId' is not null or undefined
        if (reservationId === null || reservationId === undefined) {
            throw new Error('Required parameter reservationId was null or undefined when calling readAllMessage.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml'
        ];
        
        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param from 
     * @param html 
     * @param text 
     * @param to 
     * @param subject 
     */
    public sendGridWithHttpInfo(from: string, html: string, text: string, to: string, subject: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/rsv/admin/email/yelp`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'from' is not null or undefined
        if (from === null || from === undefined) {
            throw new Error('Required parameter from was null or undefined when calling sendGrid.');
        }
        // verify required parameter 'html' is not null or undefined
        if (html === null || html === undefined) {
            throw new Error('Required parameter html was null or undefined when calling sendGrid.');
        }
        // verify required parameter 'text' is not null or undefined
        if (text === null || text === undefined) {
            throw new Error('Required parameter text was null or undefined when calling sendGrid.');
        }
        // verify required parameter 'to' is not null or undefined
        if (to === null || to === undefined) {
            throw new Error('Required parameter to was null or undefined when calling sendGrid.');
        }
        // verify required parameter 'subject' is not null or undefined
        if (subject === null || subject === undefined) {
            throw new Error('Required parameter subject was null or undefined when calling sendGrid.');
        }
        if (from !== undefined) {
            queryParameters.set('from', <any>from);
        }
        if (html !== undefined) {
            queryParameters.set('html', <any>html);
        }
        if (text !== undefined) {
            queryParameters.set('text', <any>text);
        }
        if (to !== undefined) {
            queryParameters.set('to', <any>to);
        }
        if (subject !== undefined) {
            queryParameters.set('subject', <any>subject);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * Sends a message related to specified reservation.
     * 
     * @param restaurantId Restaurant identifier
     * @param reservationId Reservation identifier
     * @param createMessageContract The message with body
     */
    public sendMessageWithHttpInfo(restaurantId: number, reservationId: string, createMessageContract: models.CreateMessage, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/rsv/admin/restaurants/${restaurantId}/reservations/${reservationId}/messages`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is not null or undefined
        if (restaurantId === null || restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling sendMessage.');
        }
        // verify required parameter 'reservationId' is not null or undefined
        if (reservationId === null || reservationId === undefined) {
            throw new Error('Required parameter reservationId was null or undefined when calling sendMessage.');
        }
        // verify required parameter 'createMessageContract' is not null or undefined
        if (createMessageContract === null || createMessageContract === undefined) {
            throw new Error('Required parameter createMessageContract was null or undefined when calling sendMessage.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml', 
            'application/x-www-form-urlencoded', 
            'image/jpg', 
            'image/jpeg', 
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml'
        ];
        
        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: createMessageContract == null ? '' : JSON.stringify(createMessageContract), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param settings 
     */
    public setReservationSettingsWithHttpInfo(restaurantId: number, settings: models.ReservationSettings, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/rsv/admin/restaurants/${restaurantId}/settings`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is not null or undefined
        if (restaurantId === null || restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling setReservationSettings.');
        }
        // verify required parameter 'settings' is not null or undefined
        if (settings === null || settings === undefined) {
            throw new Error('Required parameter settings was null or undefined when calling setReservationSettings.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml', 
            'application/x-www-form-urlencoded', 
            'image/jpg', 
            'image/jpeg', 
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml'
        ];
        
        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: settings == null ? '' : JSON.stringify(settings), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     */
    public submitYelpReservationWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/rsv/admin/email/yelp/inbound`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param restaurantId 
     * @param reservationId 
     * @param value 
     */
    public updateReservationWithHttpInfo(restaurantId: number, reservationId: string, value: models.CreateReservation, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/api/rsv/admin/restaurants/${restaurantId}/reservations/${reservationId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'restaurantId' is not null or undefined
        if (restaurantId === null || restaurantId === undefined) {
            throw new Error('Required parameter restaurantId was null or undefined when calling updateReservation.');
        }
        // verify required parameter 'reservationId' is not null or undefined
        if (reservationId === null || reservationId === undefined) {
            throw new Error('Required parameter reservationId was null or undefined when calling updateReservation.');
        }
        // verify required parameter 'value' is not null or undefined
        if (value === null || value === undefined) {
            throw new Error('Required parameter value was null or undefined when calling updateReservation.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml', 
            'application/x-www-form-urlencoded', 
            'image/jpg', 
            'image/jpeg', 
            'image/png'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json', 
            'text/json', 
            'application/xml', 
            'text/xml'
        ];
        
        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken)
        {
            headers.set('Authorization', 'Bearer ' + this.configuration.accessToken);
        }
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: value == null ? '' : JSON.stringify(value), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

}
